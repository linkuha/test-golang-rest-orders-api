// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository/product/product.go

// Package mock_product is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/linkuha/test-golang-rest-orders-api/internal/domain/entity"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddPrice mocks base method.
func (m *MockRepository) AddPrice(productId string, price *entity.Price) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPrice", productId, price)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPrice indicates an expected call of AddPrice.
func (mr *MockRepositoryMockRecorder) AddPrice(productId, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPrice", reflect.TypeOf((*MockRepository)(nil).AddPrice), productId, price)
}

// Get mocks base method.
func (m *MockRepository) Get(id string) (*entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), id)
}

// GetAll mocks base method.
func (m *MockRepository) GetAll() (*[]entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(*[]entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRepository)(nil).GetAll))
}

// GetPrices mocks base method.
func (m *MockRepository) GetPrices(id string) (*[]entity.Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrices", id)
	ret0, _ := ret[0].(*[]entity.Price)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrices indicates an expected call of GetPrices.
func (mr *MockRepositoryMockRecorder) GetPrices(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrices", reflect.TypeOf((*MockRepository)(nil).GetPrices), id)
}

// Remove mocks base method.
func (m *MockRepository) Remove(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockRepositoryMockRecorder) Remove(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockRepository)(nil).Remove), id)
}

// Store mocks base method.
func (m *MockRepository) Store(product *entity.Product) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", product)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockRepositoryMockRecorder) Store(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockRepository)(nil).Store), product)
}

// StoreWithPrices mocks base method.
func (m *MockRepository) StoreWithPrices(product *entity.Product) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreWithPrices", product)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreWithPrices indicates an expected call of StoreWithPrices.
func (mr *MockRepositoryMockRecorder) StoreWithPrices(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreWithPrices", reflect.TypeOf((*MockRepository)(nil).StoreWithPrices), product)
}

// Update mocks base method.
func (m *MockRepository) Update(id string, input *entity.ProductUpdateInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), id, input)
}
