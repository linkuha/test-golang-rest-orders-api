// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository/profile/profile.go

// Package mock_profile is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/linkuha/test-golang-rest-orders-api/internal/domain/entity"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetByUserID mocks base method.
func (m *MockRepository) GetByUserID(userID string) (*entity.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", userID)
	ret0, _ := ret[0].(*entity.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockRepositoryMockRecorder) GetByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockRepository)(nil).GetByUserID), userID)
}

// RemoveByUserID mocks base method.
func (m *MockRepository) RemoveByUserID(userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveByUserID", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveByUserID indicates an expected call of RemoveByUserID.
func (mr *MockRepositoryMockRecorder) RemoveByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveByUserID", reflect.TypeOf((*MockRepository)(nil).RemoveByUserID), userID)
}

// Store mocks base method.
func (m *MockRepository) Store(profile *entity.Profile) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", profile)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockRepositoryMockRecorder) Store(profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockRepository)(nil).Store), profile)
}

// Update mocks base method.
func (m *MockRepository) Update(profile *entity.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), profile)
}
